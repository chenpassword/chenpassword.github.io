{"meta":{"title":"小猿人","subtitle":"欢迎来到我的小屋~","description":"","author":"树洞","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"学习javaScript第一天","slug":"学习javaScript第一天","date":"2022-05-05T09:41:11.000Z","updated":"2022-05-07T10:37:38.887Z","comments":true,"path":"2022/05/05/学习javaScript第一天/","link":"","permalink":"http://example.com/2022/05/05/%E5%AD%A6%E4%B9%A0javaScript%E7%AC%AC%E4%B8%80%E5%A4%A9/","excerpt":"","text":"JavaScript 简介JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。 JavaScript 是脚本语言JavaScript 是一种轻量级的编程语言。 JavaScript 是可插入 HTML 页面的编程代码。 JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。 JavaScript 很容易学习。 JavaScript 用法 HTML 中的脚本必须位于 与 标签之间。 脚本可被放置在 HTML 页面的 和 部分中。 1、在标签中填写 onclick 事件调用函数时，不是 onclick&#x3D;函数名， 而是 **onclick&#x3D;函数名+()**，代码如下： 123456789&lt;script&gt; function myfunction()&#123; document.getElementById(&quot;demo&quot;).innerHTML=&quot;onclick事件触发&quot;; &#125;&lt;/script&gt; &lt;/head&gt;&lt;body&gt; &lt;h1 id=&quot;demo&quot;&gt;一个段落&lt;/h1&gt; &lt;button onclick=&quot;myfunction()&quot; type=&quot;button&quot;&gt;点击这里&lt;/button&gt;&lt;/body&gt; 2、外部 javascript 文件不使用 标签，直接写 javascript 代码。 3、HTML 输出流中使用 document.write，相当于添加在原有html代码中添加一串html代码。而如果在文档加载后使用（如使用函数），会覆盖整个文档。 使用函数来执行document.write代码如下： 123456789101112&lt;script&gt;function myfunction()&#123; document.write(&quot;使用函数来执行doucment.write，即在文档加载后再执行这个操作，会实现文档覆盖&quot;);&#125;document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;);document.write(&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;);&lt;/script&gt;&lt;p &gt;您只能在 HTML 输出流中使用 &lt;strong&gt;document.write&lt;/strong&gt;。如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。&lt;/p&gt;&lt;button type=&quot;button&quot; onclick=&quot;myfunction()&quot;&gt;点击这里&lt;/button&gt; JavaScript 输出JavaScript 没有任何打印或者输出的函数。 JavaScript 显示数据JavaScript 可以通过不同的方式来输出数据： 使用 window.alert() 弹出警告框。 使用 document.write() 方法将内容写到 HTML 文档中。 使用 innerHTML 写入到 HTML 元素。 使用 console.log() 写入到浏览器的控制台。 如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。 document.getElementById(\"demo\") 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。 innerHTML = \"段落已修改。\" 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。 JavaScript 语法JavaScript 是一个程序语言。语法规则定义了语言结构。 数组（Array）字面量 定义一个数组： 1[40, 100, 1, 5, 25, 10] 对象（Object）字面量 定义一个对象： 1&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125; 函数（Function）字面量 定义一个函数： 1function myFunction(a, b) &#123; return a * b;&#125; JavaScript 变量在编程语言中，变量用于存储数据值。 JavaScript 使用关键字 var 来定义变量， 使用等号来为变量赋值： 12345var x, lengthx = 5length = 6 数据类型的概念编程语言中，数据类型是一个非常重要的内容。 为了可以操作变量，了解数据类型的概念非常重要。 如果没有使用数据类型，以下实例将无法执行： 116 + &quot;Volvo&quot; JavaScript 字母大小写JavaScript 对大小写是敏感的。 当编写 JavaScript 语句时，请留意是否关闭大小写切换键。 函数 getElementById 与 getElementbyID 是不同的。 同样，变量 myVariable 与 MyVariable 也是不同的。 JavaScript 语句JavaScript 语句JavaScript 语句是发给浏览器的命令。 这些命令的作用是告诉浏览器要做的事情。 下面的 JavaScript 语句向 id=\"demo\" 的 HTML 元素输出文本 \"你好 Dolly\" ： 1document.getElementById(&quot;demo&quot;).innerHTML = &quot;你好 Dolly&quot;; JavaScript 语句标识符JavaScript 语句通常以一个 语句标识符 为开始，并执行该语句。 语句标识符是保留关键字不能作为变量名使用。 下表列出了 JavaScript 语句标识符 (关键字) ： 语句 描述 break 用于跳出循环。 catch 语句块，在 try 语句块执行出错时执行 catch 语句块。 continue 跳过循环中的一个迭代。 do … while 执行一个语句块，在条件语句为 true 时继续执行该语句块。 for 在条件语句为 true 时，可以将代码块执行指定的次数。 for … in 用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。 function 定义一个函数 if … else 用于基于不同的条件来执行不同的动作。 return 退出函数 switch 用于基于不同的条件来执行不同的动作。 throw 抛出（生成）错误 。 try 实现错误处理，与 catch 一同使用。 var 声明一个变量。 while 当条件语句为 true 时，执行语句块。 空格JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。下面的两行代码是等效的： 12var person=&quot;runoob&quot;;var person = &quot;runoob&quot;; JavaScript 注释JavaScript 注释JavaScript 不会执行注释。 我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。 单行注释以 // 开头。 本例用单行注释来解释代码： 1234// 输出标题：document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;;// 输出段落：document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;; JavaScript 多行注释多行注释以 /* 开始，以 ***/** 结尾。 下面的例子使用多行注释来解释代码： 1234567/*下面的这些代码会输出一个标题和一个段落并将代表主页的开始*/document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;;document.getElementById(&quot;myP&quot;).innerHTML=&quot;这是我的第一个段落。&quot;; 注意： 掌握多行注释 /* */ 和单行注释即可 // JavaScript 变量JavaScript 变量与代数一样，JavaScript 变量可用于存放值（比如 x=5）和表达式（比如 z=x+y）。 变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。 变量必须以字母开头 变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做） 变量名称对大小写敏感（y 和 Y 是不同的变量） JavaScript 数据类型JavaScript 变量还能保存其他数据类型，比如文本值 (name=\"Bill Gates\")。 在 JavaScript 中，类似 \"Bill Gates\" 这样一条文本被称为字符串。 JavaScript 变量有很多种类型，但是现在，我们只关注数字和字符串。 当您向变量分配文本值时，应该用双引号或单引号包围这个值。 当您向变量赋的值是数值时，不要使用引号。如果您用引号包围数值，该值会被作为文本来处理。 变量的注释： 123var name;//没有赋值的空变量name=&#x27;ch&#x27;;var name=&#x27;ch&#x27;;//可以对变量进行赋值也可以应用变量然后在进行赋值 JavaScript 数据类型**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。 引用数据类型（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。 对象属性可以说 \"JavaScript 对象是变量的容器\"。 但是，我们通常认为 \"JavaScript 对象是键值对的容器\"。 键值对通常写法为 name : value (键与值以冒号分割)。 键值对在 JavaScript 对象通常称为 对象属性。 类似于java里面的Map键值对：name : value (键与值以冒号分割) 访问对象方法你可以使用以下语法创建对象方法： 123456789101112131415methodName : function() &#123; // 代码 &#125;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;script&gt;var person = &#123; firstName: &quot;John&quot;, lastName : &quot;Doe&quot;, id : 5566, fullName : function() &#123; return this.firstName + &quot; &quot; + this.lastName; &#125; JavaScript 函数函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。 JavaScript 函数语法函数就是包裹在花括号中的代码块，前面使用了关键词 function： 1234function functionname()&#123; // 执行代码&#125; lamp JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。 调用带参数的函数在调用函数时，您可以向其传递值，这些值被称为参数。 这些参数可以在函数中使用。 您可以发送任意多的参数，由逗号 (,) 分隔： 1myFunction (argument1,argument2) 1234function myFunction(var1,var2)&#123;代码&#125; 带有返回值的函数有时，我们会希望函数将值返回调用它的地方。 通过使用 return 语句就可以实现。 在使用 return 语句时，函数会停止执行，并返回指定的值 语法12345function myFunction()&#123; var x=5; return x;&#125; 局部 JavaScript 变量在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。 您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。 只要函数运行完毕，本地变量就会被删除。 12345678910111213var var1 = 1; // 不可配置全局属性var2 = 2; // 没有使用 var 声明，可配置全局属性console.log(this.var1); // 1console.log(window.var1); // 1console.log(window.var2); // 2delete var1; // false 无法删除console.log(var1); //1delete var2; console.log(delete var2); // trueconsole.log(var2); // 已经删除 报错变量未定义 JavaScript 作用域作用域是可访问变量的集合。 JavaScript 作用域在 JavaScript 中, 对象和函数同样也是变量。 在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。 JavaScript 函数作用域: 作用域在函数内修改。 JavaScript 事件HTML 事件是发生在 HTML 元素上的事情。 当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。 HTML 事件HTML 事件可以是浏览器行为，也可以是用户行为。 以下是 HTML 事件的实例： HTML 页面完成加载 HTML input 字段改变时 HTML 按钮被点击 通常，当事件发生时，你可以做些事情。 在事件触发时 JavaScript 可以执行一些代码。 HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。 单引号: 1&lt;some-HTML-element some-event=&#x27;JavaScript 代码&#x27;&gt; 双引号: 1&lt;some-HTML-element some-event=&quot;JavaScript 代码&quot;&gt; JavaScript代码通常是几行代码。比较常见的是通过事件属性来调用： 12345678910&lt;body&gt;&lt;p&gt;点击按钮执行 &lt;em&gt;displayDate()&lt;/em&gt; 函数.&lt;/p&gt;&lt;button onclick=&quot;displayDate()&quot;&gt;点这里&lt;/button&gt;&lt;script&gt;function displayDate()&#123; document.getElementById(&quot;demo&quot;).innerHTML=Date();&#125;&lt;/script&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;&lt;/body&gt; 常见的HTML事件下面是一些常见的HTML事件的列表: 事件 描述 onchange HTML 元素改变 onclick 用户点击 HTML 元素 onmouseover 鼠标指针移动到指定的元素上时发生 onmouseout 用户从一个 HTML 元素上移开鼠标时发生 onkeydown 用户按下键盘按键 onload 浏览器已完成页面的加载 JavaScript 字符串JavaScript 字符串用于存储和处理文本。 JavaScript 字符串字符串可以存储一系列字符，如 \"John Doe\"。 字符串可以是插入到引号中的任何字符。你可以使用单引号或双引号： 12var carname = &quot;Volvo XC60&quot;;var carname = &#x27;Volvo XC60&#x27;; 你可以使用索引位置来访问字符串中的每个字符： 1var character = carname[7]; 字符串长度可以使用内置属性 length 来计算字符串的长度： 12var txt = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;var sln = txt.length; 特殊字符 代码 输出 &#39; 单引号 &quot; 双引号 \\ 反斜杠 \\n 换行 \\r 回车 \\t tab(制表符) \\b 退格符 \\f 换页符 字符串可以是对象通常， JavaScript 字符串是原始值，可以使用字符创建： var firstName = \"John\" 但我们也可以使用 new 关键字将字符串定义为一个对象： var firstName = new String(\"John\") 1234var x = &quot;John&quot;;var y = new String(&quot;John&quot;);typeof x // 返回 Stringtypeof y // \b返回 Object 123var x = &quot;John&quot;; var y = new String(&quot;John&quot;);(x === y) // 结果为 false，因为 x 是字符串，y 是对象 === 为绝对相等，即数据类型与值都必须相等。 字符串属性 属性 描述 constructor 返回创建字符串属性的函数 length 返回字符串的长度 prototype 允许您向对象添加属性和方法 字符串方法 方法 描述 charAt() 返回指定索引位置的字符 charCodeAt() 返回指定索引位置字符的 Unicode 值 concat() 连接两个或多个字符串，返回连接后的字符串 fromCharCode() 将 Unicode 转换为字符串 indexOf() 返回字符串中检索指定字符第一次出现的位置 lastIndexOf() 返回字符串中检索指定字符最后一次出现的位置 localeCompare() 用本地特定的顺序来比较两个字符串 match() 找到一个或多个正则表达式的匹配 replace() 替换与正则表达式匹配的子串 search() 检索与正则表达式相匹配的值 slice() 提取字符串的片断，并在新的字符串中返回被提取的部分 split() 把字符串分割为子字符串数组 substr() 从起始索引号提取字符串中指定数目的字符 substring() 提取字符串中两个指定的索引号之间的字符 toLocaleLowerCase() 根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射 toLocaleUpperCase() 根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射 toLowerCase() 把字符串转换为小写 toString() 返回字符串对象值 toUpperCase() 把字符串转换为大写 trim() 移除字符串首尾空白 valueOf() 返回某个字符串对象的原始值 JavaScript 运算符运算符 = 用于赋值。 运算符 + 用于加值。 用于字符串的 + 运算符*+* 运算符用于把文本值或字符串变量加起来（连接起来）。 如需把两个或多个字符串变量连接起来，请使用 + 运算符。 123456txt1=&quot;What a very&quot;;txt2=&quot;nice day&quot;;txt3=txt1+txt2;//结果是 What a verynice day JavaScript 比较 和 逻辑运算符 &#x3D;&#x3D;&#x3D; 绝对等于（值和类型均相等） x&#x3D;&#x3D;&#x3D;”5” false x&#x3D;&#x3D;&#x3D;5 true 逻辑运算符逻辑运算符用于测定变量或值之间的逻辑。 给定 x=6 以及 y=3，下表解释了逻辑运算符： 运算符 描述 例子 &amp;&amp; and (x &lt; 10 &amp;&amp; y &gt; 1) 为 true || or (x&#x3D;&#x3D;5 || y&#x3D;&#x3D;5) 为 false ! not !(x&#x3D;&#x3D;y) 为 true 三目运算： 1variablename=(condition)?value1:value2 JavaScript if...Else 语句条件语句通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。 在 JavaScript 中，我们可使用以下条件语句： if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码 if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码 if...else if....else 语句- 使用该语句来选择多个代码块之一来执行 switch 语句 - 使用该语句来选择多个代码块之一来执行 JavaScript switch 语句语法1234567891011switch(n)&#123; case 1: 执行代码块 1 break; case 2: 执行代码块 2 break; default: 与 case 1 和 case 2 不同时执行的代码&#125; default 关键词请使用 default 关键词来规定匹配不存在时做的事情： 1234567891011var d=new Date().getDay();switch (d)&#123; case 6:x=&quot;今天是星期六&quot;; break; case 0:x=&quot;今天是星期日&quot;; break; default: x=&quot;期待周末&quot;;&#125;document.getElementById(&quot;demo&quot;).innerHTML=x; For/In 循环JavaScript for/in 语句循环遍历对象的属性： 123456var person=&#123;fname:&quot;Bill&quot;,lname:&quot;Gates&quot;,age:56&#125;; for (x in person) // x 为属性名&#123; txt=txt + person[x];&#125; JavaScript while 循环只要指定条件为 true，循环就可以一直执行代码块。 1234567891011while (条件)&#123; 需要执行的代码&#125;while (i&lt;5)&#123; x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;; i++;&#125; do/while 循环do/while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。 12345678910111213141516do&#123; 需要执行的代码&#125;while (条件);do&#123; x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;; i++;&#125;while (i&lt;5);// 不管条件如何至少被执行一次 JavaScript break 和 continue 语句break 语句用于跳出循环。 continue 用于跳过循环中的一个迭代。 break 语句我们已经在本教程之前的章节中见到过 break 语句。它用于跳出 switch() 语句。 break 语句可用于跳出循环。 break 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）： 12345678for (i=0;i&lt;10;i++)&#123; if (i==3) &#123; break; &#125; x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;&#125; continue 语句continue 语句中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。 以下例子在值为 3 时，直接跳过： 12345for (i=0;i&lt;=10;i++)&#123; if (i==3) continue; x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;&#125; JavaScript typeof, null, 和 undefinednull在 JavaScript 中 null 表示 \"什么都没有\"。 null是一个只有一个值的特殊类型。表示一个空对象引用。 typeof 操作符你可以使用 typeof 操作符来检测变量的数据类型。 undefined在 JavaScript 中, undefined 是一个没有设置值的变量。 typeof 一个没有值的变量会返回 undefined。 任何变量都可以通过设置值为 undefined 来清空。 类型为 undefined. undefined 和 null 的区别null 和 undefined 的值相等，但类型不等： 1、定义 （1）undefined：是所有没有赋值变量的默认值，自动赋值。 （2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。 2、何时使用null? 当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。 3、null 与 undefined 的异同点是什么呢？ 共同点：都是原始类型，保存在栈中变量本地。 不同点： （1）undefined——表示变量声明过但并未赋过值。 它是所有未赋值变量默认值，例如： 1var a; // a 自动被赋值为 undefined （2）null——表示一个变量将来可能指向一个对象。一般用于主动释放指向对象的引用，例如： 12var emps = [&#x27;ss&#x27;,&#x27;nn&#x27;];emps = null; // 释放指向数组的引用 4、延伸——垃圾回收站 它是专门释放对象内存的一个程序。 （1）在底层，后台伴随当前程序同时运行；引擎会定时自动调用垃圾回收期； （2）总有一个对象不再被任何变量引用时，才释放。 JavaScript 类型转换Number() 转换为数字， String() 转换为字符串， Boolean() 转换为布尔值 constructor 属性constructor 属性返回所有 JavaScript 变量的构造函数。 你可以使用 constructor 属性来查看对象是否为数组 (包含字符串 \"Array\"): 123function isArray(myArray) &#123; return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1;&#125; 你可以使用 constructor 属性来查看对象是否为日期 (包含字符串 \"Date\"): 123function isDate(myDate) &#123; return myDate.constructor.toString().indexOf(&quot;Date&quot;) &gt; -1;&#125; JavaScript 类型转换JavaScript 变量可以转换为新变量或其他数据类型： 通过使用 JavaScript 函数 通过 JavaScript 自身自动转换 将数字转换为字符串全局方法 String() 可以将数字转换为字符串。 该方法可用于任何类型的数字，字母，变量，表达式： 123String(x) // 将变量 x 转换为字符串并返回String(123) // 将数字 123 转换为字符串并返回String(100 + 23) // 将数字表达式转换为字符串并返回 Number 方法 toString() 也是有同样的效果。 123x.toString()(123).toString() // 将数字123转换为字符串(100 + 23).toString() //toString() 方法将数字转换为字符串。 在 Number 方法 章节中，你可以找到更多数字转换为字符串的方法： 方法 描述 toExponential() 把对象的值转换为指数计数法。 toFixed() 把数字转换为字符串，结果的小数点后有指定位数的数字。 toPrecision() 把数字格式化为指定的长度。 将布尔值转换为字符串全局方法 String() 可以将布尔值转换为字符串。 12String(false) // 返回 &quot;false&quot;String(true) // 返回 &quot;true&quot; Boolean 方法 toString() 也有相同的效果。 12false.toString() // 返回 &quot;false&quot;true.toString() // 返回 &quot;true&quot; 将日期转换为字符串Date() 返回字符串。 1Date() // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time) 全局方法 String() 可以将日期对象转换为字符串。 1String(new Date()) // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time) 方法 描述 getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。 getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。 getFullYear() 从 Date 对象以四位数字返回年份。 getHours() 返回 Date 对象的小时 (0 ~ 23)。 getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。 getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。 getMonth() 从 Date 对象返回月份 (0 ~ 11)。 getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。 getTime() 返回 1970 年 1 月 1 日至今的毫秒数。 将字符串转换为数字全局方法 Number() 可以将字符串转换为数字。 字符串包含数字(如 \"3.14\") 转换为数字 (如 3.14). 空字符串转换为 0。 其他的字符串会转换为 NaN (不是个数字)。 1234Number(&quot;3.14&quot;) // 返回 3.14Number(&quot; &quot;) // 返回 0Number(&quot;&quot;) // 返回 0Number(&quot;99 88&quot;) // 返回 NaN 方法 描述 parseFloat() 解析一个字符串，并返回一个浮点数。 parseInt() 解析一个字符串，并返回一个整数。 将布尔值转换为数字全局方法 Number() 可将布尔值转换为数字。 12Number(false) // 返回 0Number(true) // 返回 1 将日期转换为数字全局方法 Number() 可将日期转换为数字。 12d = new Date();Number(d) // 返回 1404568027739 日期方法 getTime() 也有相同的效果。 12d = new Date();d.getTime() // 返回 1404568027739 自动转换类型当 JavaScript 尝试操作一个 \"错误\" 的数据类型时，会自动转换为 \"正确\" 的数据类型。 以下输出结果不是你所期望的： 12345 + null // 返回 5 null 转换为 0&quot;5&quot; + null // 返回&quot;5null&quot; null 转换为 &quot;null&quot;&quot;5&quot; + 1 // 返回 &quot;51&quot; 1 转换为 &quot;1&quot; &quot;5&quot; - 1 // 返回 4 &quot;5&quot; 转换为 5 自动转换为字符串当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法： 1234document.getElementById(&quot;demo&quot;).innerHTML = myVar;myVar = &#123;name:&quot;Fjohn&quot;&#125; // toString 转换为 &quot;[object Object]&quot;myVar = [1,2,3,4] // toString 转换为 &quot;1,2,3,4&quot;myVar = new Date() // toString 转换为 &quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot; 数字和布尔值也经常相互转换： 123myVar = 123 // toString 转换为 &quot;123&quot;myVar = true // toString 转换为 &quot;true&quot;myVar = false // toString 转换为 &quot;false&quot; JavaScript 正则表达式正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。 搜索模式可用于文本搜索和文本替换。 什么是正则表达式？正则表达式是由一个字符序列形成的搜索模式。 当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。 正则表达式可以是一个简单的字符，或一个更复杂的模式。 正则表达式可用于所有文本搜索和文本替换的操作。 语法1/正则表达式主体/修饰符(可选) 实例解析： /runoob/i 是一个正则表达式。 runoob 是一个正则表达式主体 (用于检索)。 i 是一个修饰符 (搜索不区分大小写)。 使用字符串方法在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。 search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。 replace() 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。 search() 方法使用正则表达式12var str = &quot;Visit Runoob!&quot;; var n = str.search(/Runoob/i); replace() 方法使用正则表达式使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 Runoob : 12var str = document.getElementById(&quot;demo&quot;).innerHTML; var txt = str.replace(/microsoft/i,&quot;Runoob&quot;); replace() 方法使用字符串replace() 方法将接收字符串作为参数： 12var str = document.getElementById(&quot;demo&quot;).innerHTML; var txt = str.replace(&quot;Microsoft&quot;,&quot;Runoob&quot;); 正则表达式修饰符修饰符 可以在全局搜索中不区分大小写: 修饰符 描述 i 执行对大小写不敏感的匹配。 g 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。 m 执行多行匹配。 正则表达式模式方括号用于查找某个范围内的字符： 表达式 描述 [abc] 查找方括号之间的任何字符。 [0-9] 查找任何从 0 至 9 的数字。 (x|y) 查找任何以 | 分隔的选项。 元字符是拥有特殊含义的字符： 元字符 描述 \\d 查找数字。 \\s 查找空白字符。 \\b 匹配单词边界。 \\uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。 量词: 量词 描述 n+ 匹配任何包含至少一个 n 的字符串。 n* 匹配任何包含零个或多个 n 的字符串。 n? 匹配任何包含零个或一个 n 的字符串。 使用 test()test() 方法是一个正则表达式方法。 test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。 以下实例用于搜索字符串中的字符 \"e\"： 12var patt = /e/;patt.test(&quot;The best things in life are free!&quot;); JavaScript 错误 - throw、try 和 catchtry 语句测试代码块的错误。 catch 语句处理错误。 throw 语句创建自定义错误。 finally 语句在 try 和 catch 语句之后，无论是否有触发异常，该语句都会执行。 JavaScript 抛出（throw）错误当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。 描述这种情况的技术术语是：JavaScript 将抛出一个错误。 JavaScript try 和 catchtry 语句允许我们定义在执行时进行错误测试的代码块。 catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。 JavaScript 语句 try 和 catch 是成对出现的。 1234567try &#123; ... //异常的抛出&#125; catch(e) &#123; ... //异常的捕获与处理&#125; finally &#123; ... //结束处理&#125;","categories":[],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://example.com/tags/javaScript/"}]},{"title":"hexo搭建教程","slug":"hexo搭建教程","date":"2022-05-01T02:55:35.000Z","updated":"2022-05-01T03:40:04.931Z","comments":true,"path":"2022/05/01/hexo搭建教程/","link":"","permalink":"http://example.com/2022/05/01/hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","excerpt":"","text":"Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。 Hexo搭建步骤 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 将hexo部署到GitHub 设置个人域名 发布文章 安装Git到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 安装好后，用git --version 来查看一下版本 安装nodejsHexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 安装完后，打开命令行 12node -vnpm -v 安装hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开） 输入命令 : 1npm install -g hexo-cli 依旧用hexo -v查看一下版本 至此就全部安装完了。 接下来初始化一下hexo myblog：这个名字可以自定义 1hexo init myblog 这个myblog可以自己取什么名字都行，然后 12cd myblog //进入这个myblog文件夹npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 ** _config.yml: 博客的配置文件** 12hexo ghexo server 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。 如果要关闭hexo服务的话 需要在git对话框里面输入： 1ctrl+c GitHub创建个人仓库首先，你先要有一个GitHub账户，去注册一个吧。 注册完登录后，在GitHub.com中看到一个New repository，新建仓库 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。 注意： 你创建的仓库名字必须和你的用户名一致 而且在后面必须加 .github.io 不然不会部署成功的 生成SSH添加到GitHub回到你的git bash中， 输入如下的命令： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 因为版本不同在你输入命令的时候会有提示你输入的， 一定要一次性输入成功，不然你会重复前一次的操作的。因此在部署Github的时候一定要记住密码，和注册邮箱。 为了确认输入是否成功，需要输入如下命令进行查看： 12git config user.namegit config user.email 接下来就是生成SSH密钥,在电脑里面按住win+R键，输入cmd，然后输入如下命令 1ssh-keygen -t rsa -C &quot;youremail&quot; 每隔0.2秒回车下，一直连续回车三次就会生成密钥 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 命令： 1ssh -T git@github.com 将hexo部署到GitHub这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为YourgithubName就是你的GitHub账户 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 注解： type，就是你这个类型是git类型，如果不懂怎么配置就按照这个代码提示进行操作，直接复制进去，修改YourgithubName&#x2F;YourgithubName 就可以了 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 新建文件： 新建文章（这个是把文章建立在 source 根目录） 1hexo new page &quot;新建博文章的名称&quot; 还有一个方法： 1$ hexo new post &quot;title&quot; title：就是你文章的名字。 然后 输入这个命令就可以把你的文章推到GitHub服务器上面去 123hexo cleanhexo generatehexo deploy hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 123hexo cleanhexo ghexo d 注意： 在使用 hexo d 进行推送的时候可能会出现错误，或者反应慢等问题，在确保前面操作没问题的情况下，在git里面重复运行hexo d 命令就可以了。因为要推荐到国外的服务器上面难免会出现问题！ 到此你就可以在电脑把你写的博客推送到GitHub上面了。 文章参考了：zjufangzh，加上自己想想法。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"hexo页面美化","slug":"hexo页面美化","date":"2022-04-25T08:04:27.000Z","updated":"2022-04-25T08:06:45.078Z","comments":true,"path":"2022/04/25/hexo页面美化/","link":"","permalink":"http://example.com/2022/04/25/hexo%E9%A1%B5%E9%9D%A2%E7%BE%8E%E5%8C%96/","excerpt":"","text":"1.百度hexo在找到官网，然后选择自己喜欢的模板在GitHub里面打开 2.你会看到页面的详细资料，然后下载","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"如何在github部署属于自己的博客","slug":"如何在部署属于自己的博客","date":"2022-04-21T12:47:26.000Z","updated":"2022-04-25T07:45:24.398Z","comments":true,"path":"2022/04/21/如何在部署属于自己的博客/","link":"","permalink":"http://example.com/2022/04/21/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%83%A8%E7%BD%B2%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1.下载 安装 git 和 Node.je (百度官网自行下载)2.安装完成以后用以下命令检查安装情况12345node -vnpm -vgit --version 出现版本信息就是安装成功！ 3.安装 Hexo建议：在除了C盘以外的盘符里面新建一个文件夹，用于安装要下载的文件。 在你新建的文件夹里空白处单击鼠标右键， 选择 Git Bash Here 然后输入： 1npm install hexo-cli -g 等待自动安装完成后。输入 1hexo -v 然后使用： 1npm install hexo --save 初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入: 1hexo init 初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。接着输入: 1npm install 配置node。然后输入 1hexo g 加载hexo基础html、css、js等文件。在这完成后等于已经在本地创建了一个网页，想查看的话，输入: 1hexo s 你会看到一个原始的 hexo 页面！到这里你的搭建已经成功啦！ 下期，我会更新在hexo上面美化页面~~~~~","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}],"categories":[],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://example.com/tags/javaScript/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}